networks:
  dev:

services:
  backend:
    image: backend
    container_name: backend
    build:
      context: .
      dockerfile: Rindo.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
      - ASPNETCORE_HTTPS_PORTS=5001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/rindo.pfx
      - JwtOptions__SecretKey=secretkeysecretkeysecretkeysecretkeysecretkeysecretkey
      - ConnectionStrings__DatabaseDeploy=Server=rindo.db;Database=rindoDb;Port=5432;User ID=postgres;Password=123;
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - ~/.aspnet/https:/https:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - dev
  
  db:
    image: postgres:latest
    container_name: rindo.db
    environment:
      - POSTGRES_DB=rindoDb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
    volumes:
      - ./.containers/rindo-db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - dev
  
  client:
    image: client
    build:
      context: ../client
      dockerfile: Dockerfile
    ports:
      - "5002:3000"
    networks:
      - dev

  proxy:
    image: nginx:mainline
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - client
    networks:
      - dev